@model MailSender.Models.ViewModels.EditEmailViewModel

@{
    ViewBag.Title = Model.Heading;
}

<h2>@Model.Heading</h2>

<p class="alert alert-dark mb-4 mt-4">
    Widok: Email <br>
    Id = <strong>@Model.Email.Id</strong> <br>
    UserId = <strong>@Model.Email.UserId</strong> <br>
</p>

@if (Model.Email.Id != 0)
{
    <button class="btn btn-secondary mb-3"
            onclick="sendEmail()">
        Wyślij
    </button>
}

<div class="mt-3 mb-1">

</div>


<div class="row">
    <div class="col-lg-6">

        @using (Html.BeginForm("Email", "Home"))
        {

            @Html.AntiForgeryToken()
            @Html.ValidationSummary()

            if (Model.Email.Id == 0)
            {
                <p class="alert alert-info mb-4 mt-4">
                    Pola: Temat, Wiadomość są
                    <strong>wymagane</strong>
                </p>
            }

            @Html.HiddenFor(x => x.Email.Id)
            @Html.HiddenFor(x => x.Email.UserId)

            <div class="form-group mb-3">
                @Html.LabelFor(x => x.Email.Subject)
                @Html.TextBoxFor(x => x.Email.Subject,
                 new { @class = "form-control", style = "width: 100%; max-width: 100%" })
                @Html.ValidationMessageFor(x => x.Email.Subject)
            </div>


            <div class="form-group mb-3">
                @Html.LabelFor(x => x.Email.Message)
                @Html.TextAreaFor(x => x.Email.Message,
                 new { @class = "form-control", style = "width: 100%; max-width: 100%" })
                @Html.ValidationMessageFor(x => x.Email.Message)
            </div>


            <div class="form-group mb-3">
                @Html.LabelFor(x => x.Email.CreatedDate)
                @Html.TextBoxFor(x => x.Email.CreatedDate,
                "{0:dd-MM-yyyy}",
               new
               {
                   @class = "form-control",
                   @id = "CreatedDate",
                   autocomplete = "off",
                   @readonly = "readonly"
               })
            </div>

            <div class="form-group mb-3">
                @Html.LabelFor(x => x.Email.SentDate)
                @Html.TextBoxFor(x => x.Email.SentDate,
                 "{0:dd-MM-yyyy}",
                new
                {
                    @class = "form-control",
                    @id = "SentDate",
                    autocomplete = "off",
                    @readonly = "readonly"
                })
            </div>

            <button class="btn btn-primary btn-lg" type="submit">
                Zapisz
            </button>

        }

    </div>

    <div class="col-5 offset-1">

        @if (Model.Email.Id != 0)
        {
            <button class="btn btn-sm btn-primary mb-2"
                    onclick='window.location.href = "@Url.Action("EmailRecipient", "Home", new { emailId = Model.Email.Id })"'>
                Dodaj adresata
            </button>
        }

        @if (Model.Email.Id != 0)
        {
            @Html.Partial("_EmailRecipientsPartial", Model.Email.EmailRecipients)
        }
    </div>

</div>

@section scripts
{
    <script type="text/javascript">
            // --------------------------------------------

            function sendEmail() {
                if (!confirm("Czy na pewno chcesz wysłać wiadomość ?"))
                    return;
            }

            function deleteEmailRecipient(emailRecipientId, emailId, btn) {
                if (!confirm("Czy na pewno chcesz usunąć adresata ? " + emailRecipientId  + "," + emailId ))
                    return;
                // ajax
                $.ajax({
                type: 'POST',
                url: "@Url.Action("DeleteEmailRecipient", "Home")",
                 data: {
                     emailId: emailId,
                     emailRecipientId: emailRecipientId
                },
                success: function (data) {
                    if (data.Success) {
                        // usuwanie z tabeli w html'u
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);

                        var invoiceVal = data.InvoiceValue;
                        $('#Invoice_Value').val(data.InvoiceValue.toFixed(2).replace(".", ","));
                    }
                    else {
                        alert(data.Message);
                    }
                },
                error: function (data) {
                        alert(data.Message);
                },
                dataType: 'json'

                });
                // ajax
            }



            $(document).ready(function () {

                // w formatowaniu ma być precinek, a nie kropka
                $.validator.methods.number = function (value, element) {
                    return this.optional(element) || /^-?(?:\d+|\{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
                }
            });

            // format daty
            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                var isFirefox = /Firefox/.test(navigator.userAgent);
                if (isChrome || isFirefox) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };


            $('#CreatedDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });

            $('#SentDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });

    </script>
    }
